---
# tasks/main.yml

- name: Check if previous installation artifacts exist
  find:
    paths: "{{ base_install_folder_path }}/{{ environment_name }}/installation"
    recurse: true
    patterns:
      - "kubeconfig"
      - "kubeadmin-password"
      - "*.ign"

  register: r_ocp_ign_previous_install

- name: Assert no previous installation artifacts exist or running with ocp_ign_force=true
  assert:
    that: ocp_ign_force | bool or (r_ocp_ign_previous_install.files | map(attribute='path') | list) | length <= 0
    quiet: true
    fail_msg: "Found the following previous installation artifacts: {{ r_ocp_ign_previous_install.files | map(attribute='path') | list }}"

- name: Retrieve Encryption key from KMaaS
  block:

    - name: Storing OCP4 SSH Public Key in a variable
      set_fact:
        ocp4_sshpubkey: "{{ ocp4_ssh_pub_key.id_ed25519_pub }}"

    - name: Storing OCP4 Pull Secret
      set_fact:
        ocp4_pullsecret: "{{ ocp4_pull_secret.pullsecret | string }}"

    - name: assert required vault variables are defined
      assert:
        that:
          - ocp4_pullsecret is defined and ocp4_pullsecret | length > 0
          - ocp4_sshpubkey is defined and ocp4_sshpubkey | length > 0
        quiet: true

- name: Delete old directory with installation artifacts
  file:
    path: "{{ base_install_folder_path }}/{{ environment_name }}/installation"
    state: absent

- name: Create a new directory for storing installation artifacts
  file:
    path: "{{ base_install_folder_path }}/{{ environment_name }}/installation"
    state: directory
    serole: object_r
    setype: httpd_sys_content_t
    seuser: unconfined_u
    mode: '0755'

- name: Create Install Config File from template
  template:
    src: install-config.j2
    dest: "{{ item }}"
    mode: '0644'
  loop:
    - "{{ base_install_folder_path }}/{{ environment_name }}/installation/install-config.yaml"
    - "{{ base_install_folder_path }}/{{ environment_name }}/install-config.yaml"

- name: Validate openshift-install version
  command:
    cmd: openshift-install version
  register: openshift_install_result
  changed_when: "'failed' is not in openshift_install_result.stdout"

# set config template
- name: Create manifest files in the newly created artifacts directory
  command:
    cmd: openshift-install create manifests --dir "{{ base_install_folder_path }}/{{ environment_name }}/installation"
  register: oci_output
  changed_when: false

- name: Remove 99-openshift cluster files
  find:
    paths: "{{ base_install_folder_path }}/{{ environment_name }}/installation/openshift"
    file_type: file
    patterns:
      - '99_openshift-cluster-api_master-machines-*.yaml'
      - '99_openshift-cluster-api_worker-machineset-*.yaml'
  register: openshift_delete_results

- name: Ansible remove file glob
  file:
    path: "{{ item.path }}"
    state: absent
  with_items: "{{ openshift_delete_results.files }}"

# yamllint disable rule:line-length
- name: Overwrite cluster scheduler and make master un-schedulable
  command:
    cmd: sed -i -e 's/true/false/g' {{ base_install_folder_path }}/{{ environment_name }}/installation/manifests/cluster-scheduler-02-config.yml  # noqa command-instead-of-module
    warn: false
  register: overwrite_output
  changed_when: false

- name: Overwrite cluster domain name
  command:
    cmd: sed -i -e 's/apps/{{ domain_prefix }}/g' {{ base_install_folder_path }}/{{ environment_name }}/installation/manifests/cluster-ingress-02-config.yml  # noqa command-instead-of-module
    warn: false
  register: domain_output
  changed_when: false

- name: Copy custom machine config manifest files in the newly created artifacts directory
  copy:
    src: "{{ item }}"
    dest: "{{ base_install_folder_path }}/{{ environment_name }}/installation/openshift"
    mode: '0644'
    force: false
  loop:
    - "{{ additional_machine_config_manifests }}/common/mc/"
    - "{{ additional_machine_config_manifests }}/{{ environment_name }}/mc/"

- name: Create ignition files in the newly created artifacts directory
  command:
    cmd: openshift-install create ignition-configs --dir "{{ base_install_folder_path }}/{{ environment_name }}/installation"
  register: oci_output
  changed_when: false

- name: Read ignition file to apply static route and chrony updates
  set_fact:
    _ign: "{{ lookup('file', '{{ base_install_folder_path }}/{{ environment_name }}/installation/bootstrap.ign') | from_json }}"

- name: Define static routes for ignition file
  set_fact:
    _static_route_unit: |
     [Unit]
     Description=nmcli-con-modify
     After=network-online.target
     [Service]
     Type=oneshot
     ExecStartPre=nmcli connection down ens224
     ExecStart=nmcli con modify ens224 +ipv4.routes "{% for routes_var in bootstrap_static_routes %}{{ routes_var.static_route }}{% if not loop.last %}, {% endif %}{% endfor %}"

     ExecStartPost=nmcli connection up ens224
     [Install]
     WantedBy=multi-user.target
  when: add_bootstrap_static_routes | default(false) | bool

- name: Combine with existing units
  set_fact:
    _units: "{{ _ign.systemd.units + [{'contents':_static_route_unit, 'enabled': true, 'name': 'nmcli-con-modify.service'}] }}"
  when: add_bootstrap_static_routes | default(false) | bool
# yamllint enable rule:line-length

- name: Combine end result
  set_fact:
    _ign: "{{ _ign | combine({ 'systemd':{ 'units': _units }}, recursive=True) }}"
  when: add_bootstrap_static_routes | default(false) | bool

- name: Read Chrony File and convert it into base64 string
  command: base64 "{{ chrony_config }}" -w0
  register: chrony_base64_string
  when: add_bootstrap_chrony | default(false) | bool

- name: Combine with existing storage
  set_fact:
    # yamllint disable-line rule:line-length
    _files: "{{ _ign.storage.files + [{'overwrite':true,'path':'/etc/chrony.conf','user':{'name':'root'},'contents':{ 'source':'data:text/plain;charset=utf-8;base64,{{ chrony_base64_string.stdout }}'   },'mode':420}] }}"
  when: add_bootstrap_chrony | default(false) | bool

- name: Combine end result again
  set_fact:
    _ign: "{{ _ign | combine({ 'storage' :{ 'files' : _files }}, recursive=True) }}"
  when: add_bootstrap_chrony | default(false) | bool

- name: Save new ignition file
  copy:
    dest: "{{ base_install_folder_path }}/{{ environment_name }}/installation/bootstrap.ign"
    content: |
     {{ _ign }}
    mode: '0644'
    serole: object_r
    setype: httpd_sys_content_t
    seuser: unconfined_u
  when: (add_bootstrap_chrony | default(false) | bool) or (add_bootstrap_static_routes | default(false) | bool)

- name: Copy newly created ignition files to the webserver
  copy:
    src: "{{ item }}"
    dest: "{{ webserver_folder_path }}/{{ item | basename | regex_replace('^([^\\.]*).*', '\\1') }}-{{ environment_name }}.ign"
    mode: '0644'
    force: true
    serole: object_r
    setype: httpd_sys_content_t
    seuser: unconfined_u
    owner: "{{ webserver_user }}"
    group: "{{ webserver_group }}"
  loop:
    - "{{ base_install_folder_path }}/{{ environment_name }}/installation/master.ign"
    - "{{ base_install_folder_path }}/{{ environment_name }}/installation/worker.ign"
    - "{{ base_install_folder_path }}/{{ environment_name }}/installation/bootstrap.ign"

- name: Run restorecon on files
  command: restorecon -v {{ webserver_folder_path }}/*.ign
  register: r_cmd_restorecon
  changed_when: r_cmd_restorecon.stdout_lines | length > 0

- name: Create a copy of the kubeconfig file
  copy:
    src: "{{ base_install_folder_path }}/{{ environment_name }}/installation/auth/kubeconfig"
    dest: "{{ base_install_folder_path }}/{{ environment_name }}/installation/auth/kubeconfig.no-verify"
    mode: '0644'
    force: true

- name: Remove CA Data from new kubeconfig file
  lineinfile:
    path: "{{ base_install_folder_path }}/{{ environment_name }}/installation/auth/kubeconfig.no-verify"
    regexp: '^[\t ]+certificate-authority-data:'
    state: absent

- name: Add Skip TLS Verify to new kubeconfig file
  lineinfile:
    path: "{{ base_install_folder_path }}/{{ environment_name }}/installation/auth/kubeconfig.no-verify"
    insertbefore: '^[\t ]+server:'
    regexp: '^[\t ]+insecure-skip-tls-verify:'
    line: "{{ 'insecure-skip-tls-verify: true' | indent(4, true) }}"

- name: Add kubeconfig and kubeadmin password to KMaaS
  block:
    - name: Check if secret exists in KMaaS
      uri:
        url: "{{ kmaas_secrets_vault_addr }}/v1/{{ kmaas_secrets_engine_mount }}/metadata/ocp_ign/{{ environment_name }}"
        method: GET
        headers:
          X-Vault-Request: true
          X-Vault-Namespace: "{{ kmaas_secrets_vault_namespace }}/"
          X-Vault-Token: "{{ kmaas_secrets_vault_token }}"
        status_code: [200, 204, 404]
        validate_certs: "{{ kmaas_secrets_ssl_verify }}"
      changed_when: true
      no_log: true
      run_once: true
      delegate_to: localhost
      become: false
      register: r_kmaas_list_kubeconfig_secrets

    - name: Assert KMaaS Secret Doesn't Exist
      assert:
        fail_msg: "Secret Already Exists in KMaaS with at least one Version"
        quiet: true
        that: (ocp_ign_kmaas_force) or (r_kmaas_list_kubeconfig_secrets.status | int == 404)

    - name: Slurp kubeconfig and kubeadmin password
      slurp:
        src: "{{ base_install_folder_path }}/{{ environment_name }}/installation/auth/{{ item }}"
      register: r_slurp_installation_auth
      loop:
        - kubeadmin-password
        - kubeconfig
        - kubeconfig.no-verify

    - name: Add a secret to KMaaS
      uri:
        url: "{{ kmaas_secrets_vault_addr }}/v1/{{ kmaas_secrets_engine_mount }}/data/ocp_ign/{{ environment_name }}"
        method: POST
        headers:
          X-Vault-Request: true
          X-Vault-Namespace: "{{ kmaas_secrets_vault_namespace }}/"
          X-Vault-Token: "{{ kmaas_secrets_vault_token }}"
        body_format: json
        body: >
          {% set r = {'options': {}, 'data':{} } %}
          {% for result in r_slurp_installation_auth.results %}
          {% set _ = r['data'].update({result.item:result.content}) %}
          {% endfor %}
          {{ r | to_json }}
        status_code: [200, 204]
        validate_certs: "{{ kmaas_secrets_ssl_verify }}"
      changed_when: true
      no_log: true
      run_once: true
      delegate_to: localhost
      become: false

  rescue:
    - name: Output Error Message
      debug:
        msg: "Failed to upload to KMaaS as the kubeconfig secret already exists, use ocp_ign_kmaas_force to force re-create"

  when:
    - kmaas_secrets_vault_addr is defined and kmaas_secrets_vault_addr | length > 0
    - kmaas_secrets_vault_namespace is defined and kmaas_secrets_vault_namespace | length > 0
    - kmaas_secrets_vault_token is defined and kmaas_secrets_vault_token | length > 0
